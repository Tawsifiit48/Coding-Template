int sp[SZ][20], lvl[SZ];
vi v[SZ];
 
int timer, l;
vector<int> tin, tout;
vector<vector<int>> up;
 
void dfs(int u, int p)
{
    tin[u] = ++timer;
    up[u][0] = p;
    lvl[u] = lvl[p] + 1;
    for (int i = 1; i <= l; ++i)
        up[u][i] = up[up[u][i-1]][i-1];
 
    for (int x : v[u]) {
        if (x != p)
            dfs(x, u);
    }
 
    tout[u] = ++timer;
}
 
bool is_ancestor(int u, int v)
{
    return tin[u] <= tin[v] && tout[u] >= tout[v];
}
 
int lca(int u, int v)
{
    if (is_ancestor(u, v))
        return u;
    if (is_ancestor(v, u))
        return v;
    for (int i = l; i >= 0; --i) {
        if (!is_ancestor(up[u][i], v))
            u = up[u][i];
    }
    return up[u][0];
}
 
void preprocess(int root, int n) {
    tin.resize(n+10);
    tout.resize(n+10);
    timer = 0;
    l = ceil(log2(n));
    up.assign(n + 10, vector<int>(l + 1));
    dfs(root, root);
}
